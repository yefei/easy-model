#!/usr/bin/env node

'use strict';

require('dotenv').config();

const fs = require('fs');
const path = require('path');
const mysql = require('mysql');
const { Query } = require('mysql-easy-query');

const dbname = process.env.MYSQL_DATABASE;
if (!dbname) {
  help();
  process.exit();
}

const tsFilename = process.env.OUTPUT_TYPES_FILE || 'types/models.d.ts';
const tsFile = path.resolve(process.cwd(), tsFilename);
const modelsFilename = process.env.OUTPUT_MODELS_FILE || 'app/models.js';
const modelsFile = path.resolve(process.cwd(), modelsFilename);
let tsRelative = path.relative(modelsFile, tsFile).replace(/\\/g, '/').substring(3);
if (!tsRelative.startsWith('../')) tsRelative = `./${tsRelative}`;
tsRelative = tsRelative.slice(0, -5); // remove .d.ts

const conn = mysql.createConnection({
  host: process.env.MYSQL_HOST || 'localhost',
  port: process.env.MYSQL_PORT || 3306,
  user: process.env.MYSQL_USER || 'root',
  password: process.env.MYSQL_PASSWORD,
  database: dbname,
});

const query = new Query(conn);

/**
 * @param {string} type
 */
function getColumnType(type) {
  if (type.search(/timestamp|datetime/i) != -1) return 'Date';
  if (type.search(/int|float/i) != -1) return 'number';
  return 'string';
}

/**
 * @param {string} name
 */
function nameCase(name) {
  return name.split('_').map(c => c[0].toUpperCase() + c.substring(1)).join('');
}

async function main() {
  console.log('get tables...');
  const tables = await query.query('SHOW TABLES');
  const remark = [
    '// mysql-easy-type auto generate',
    '// This file is automatically generated',
    '// Please do not modify',
    `// date: ${new Date().toLocaleString()}`,
    `// user: ${process.env.USER || process.env.USERNAME || 'unknown'}@${process.env.COMPUTERNAME || 'unknown'}`,
    `// database: ${dbname}`,
  ];
  const out = [
    ...remark,
    '',
    "import { Instance, Model, Query } from 'mysql-easy-type';",
    '',
  ];
  const modelJs = [
    "'use strict';",
    ...remark,
    '',
    "const { model } = require('mysql-easy-type');",
    '',
  ];
  for (const t of tables) {
    const tableName = t[`Tables_in_${dbname}`];
    const className = nameCase(tableName);
    console.log('table:', tableName);
    const columns = await query.query('SHOW FULL COLUMNS FROM ??', [tableName]);
    out.push(`/**`);
    out.push(` * table: ${tableName}`);
    out.push(` */`);
    out.push(`export declare class ${className} extends Instance {`);
    for (const c of columns) {
      out.push(`  /**`);
      c.Comment && out.push(`   * ${c.Comment}`);
      out.push(`   * ${c.Type} ${c.Extra}`);
      out.push(`   */`);
      out.push(`  ${c.Field}: ${getColumnType(c.Type)};`);
    }
    out.push(`}`);
    out.push(``);
    out.push(`export declare class ${className}Model extends Model<${className}> {}`);
    out.push(`export type ${className}Type = (query: Query) => ${className}Model;`);
    out.push(``);

    // js
    modelJs.push(`/** @type { import('${tsRelative}').${className}Type } */`);
    modelJs.push(`exports.${className} = model('${tableName}');`);
    modelJs.push(``);
  }

  console.log(`write type file: ${tsFile}`);
  fs.writeFileSync(tsFile, out.join('\n'));

  console.log(`write models file: ${modelsFile}`);
  fs.writeFileSync(modelsFile, modelJs.join('\n'));
}

function help() {
  console.log('Create environment variable file: .env');
  console.log('Write optional configuration items:');
  console.log('MYSQL_HOST=localhost');
  console.log('MYSQL_PORT=3306');
  console.log('MYSQL_USER=root');
  console.log('MYSQL_PASSWORD=');
  console.log('MYSQL_DATABASE=');
  console.log('OUTPUT_TYPES_FILE=types/models.d.ts');
  console.log('OUTPUT_MODELS_FILE=app/models.js');
}

main().catch(e => {
  console.log(e);
  console.log('='.repeat(100));
  console.log('Execution failed....');
  help();
}).finally(() => process.exit());
setInterval(() => {}, 1000);
